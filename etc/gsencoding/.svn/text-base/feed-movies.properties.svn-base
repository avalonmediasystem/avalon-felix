####
# Profile definitions for the encoding service.
#
# In order to understand how to configure a format, take a look a the
# documentation below:
#
# profile.<format>.name:
#     Name of the format, used in download dialogs of the frontend.
#
# profile.<format>.output:
#     Type of the distribution format.
#     [video|image]
#
# profile.<format>.suffix:
#     Extension that will be appended to the download.
#
# profile.<format>.mimetype:
#     Mime type used to provide proper content types.
#
# profile.<format>.input:
#     Track categories for which this format is applicable.
#     Known categories are:
#     - audio : for tracks containing only audio streams
#     - video : tracks containg video and probably audio
#     - enhanced-audio : for so-called enhanced audio tracks
#
# Please be aware that the profile identifiers are not used by the feed
# aggregator directly. Instead, the "compose" operations in the workflow
# definition will call these profiles and assign a flavor to the encoding
# result, which is then used to include the media in the feed.
##

# Distribution format definition for mpeg4 avi presenter/presentation download
profile.feed-avi.http.name = mpeg4/avi download
profile.feed-avi.http.input = visual
profile.feed-avi.http.output = visual
profile.feed-avi.http.suffix = -low-dl.avi
profile.feed-avi.http.mimetype = video/avi
profile.feed-avi.http.gstreamer.pipeline = filesrc location=#{in.video.path} ! decodebin2 name=demuxer ! queue ! audiorate ! audioresample !  audio/x-raw-int,rate=44100 ! faac ! avimux name=muxer ! filesink location=#{out.file.path} demuxer. ! queue ! ffmpegcolorspace ! videorate ! video/x-raw-yuv,rate=25/1 ! videoscale ! video/x-raw-yuv,width=320,height=240 ! ffenc_mpeg4 ! video/mpeg ! muxer.

# Distribution format definition for aac/m4a audio download
profile.feed-m4a.http.name = audio/mp4 download
profile.feed-m4a.http.input = audio
profile.feed-m4a.http.output = audio
profile.feed-m4a.http.suffix = .m4a
profile.feed-m4a.http.mimetype = audio/m4a
profile.feed-m4a.http.gstreamer.pipeline = filesrc location=#{in.video.path} ! decodebin2 ! audiorate ! audioresample ! audio/x-raw-int,rate=22050 ! faac bitrate=192000 ! mp4mux ! filesink location=#{out.file.path}
