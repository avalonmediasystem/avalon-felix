####
# Auxiliary movie and image profile definitions, mostly for the media analysis
# services.
#
# ATTENTION:
#
# Do not change the identifier of the formats below. Media analysis and other 
# services are relying on them.
#
# In order to understand how to configure a format, take a look a the
# documentation below:
#
# profile.<format>.name:
#     Name of the format, used in download dialogs of the frontend.
#
# profile.<format>.output:
#     Type of the distribution format.
#     [video|image]
#
# profile.<format>.suffix:
#     Extension that will be appended to the download.
#
# profile.<format>.mimetype:
#     Mime type used to provide proper content types.
#
# profile.<format>.input:
#     Track categories for which this format is applicable.
#     Known categories are:
#     - audio : for tracks containing only audio streams
#     - video : tracks containg video and probably audio
#     - enhanced-audio : for so-called enhanced audio tracks
##
# Re-encode audiovisual stream
profile.av.work.name = Re-encode audiovisual track
profile.av.work.input = stream
profile.av.work.output = audiovisual
profile.av.work.mimetype = #{in.video.mimetype}
profile.av.work.suffix = -work.#{in.video.suffix}
profile.av.work.gstreamer.pipeline = filesrc location=#{in.video.path} ! filesink location=#{out.file.path}

# Mux one audio and one video stream
profile.mux-av.work.name = mux audio and video
profile.mux-av.work.input = stream
profile.mux-av.work.output = visual
profile.mux-av.work.mimetype = video/mpeg
profile.mux-av.work.suffix = -work.mp4
profile.mux-av.work.gstreamer.pipeline = filesrc location=#{in.video.path} ! decodebin2 ! ffmpegcolorspace ! ffdeinterlace ! ffenc_mpeg4 bitrate=800000 ! mp4mux name=mux ! filesink location=#{out.file.path} filesrc location=#{in.audio.path} ! decodebin2 ! audioconvert ! faac ! mux.

# Trim a stream
profile.trim.work.name = trim track
profile.trim.work.input = stream
profile.trim.work.output = visual
profile.trim.work.mimetype = video/mpeg
profile.trim.work.suffix = -trimmed.mp4
profile.trim.work.gstreamer.pipeline = gnlurisource uri=file://#{in.video.path} caps=video/x-raw-yuv media-start=#{trim.start} media-duration=#{trim.duration} ! ffmpegcolorspace ! ffdeinterlace ! ffenc_mpeg4 bitrate=800000 ! mp4mux name=mux ! filesink location=#{out.file.path} gnlurisource uri=file://#{in.video.path} caps=audio/x-raw-int media-start=#{trim.start} media-duration=#{trim.duration} ! audioconvert ! faac ! mux.

# Audio only (strip video)
profile.audio-only.work.name = audio only
profile.audio-only.work.input = visual
profile.audio-only.work.output = audio
profile.audio-only.work.suffix = -work.m4a
profile.audio-only.work.mimetype = video/mpeg
profile.audio-only.work.gstreamer.pipeline = filesrc location=#{in.video.path} ! decodebin2 ! audioconvert ! faac ! mp4mux ! filesink location=#{out.file.path}

# Video only (strip audio)
profile.video-only.work.name = video only
profile.video-only.work.input = visual
profile.video-only.work.output = visual
profile.video-only.work.suffix = -work.m4v
profile.video-only.work.mimetype = video/mpeg
profile.video-only.work.gstreamer.pipeline = filesrc location=#{in.video.path} ! decodebin2 ! ffmpegcolorspace ! ffdeinterlace ! ffenc_mpeg4 bitrate=800000 ! mp4mux ! filesink location=#{out.file.path}


# Format definition for mjpeg movies used by the video segmenter (matterhorn-vsegmenter)
profile.video-segmentation.http.name = motion jpeg
profile.video-segmentation.http.input = visual
profile.video-segmentation.http.output = visual
profile.video-segmentation.http.suffix = -mjpeg.mov
profile.video-segmentation.http.mimetype = video/x-motion-jpeg
profile.video-segmentation.http.gstreamer.pipeline = filesrc location=#{in.video.path} ! decodebin2 ! ffmpegcolorspace ! deinterlace ! videorate ! video/x-raw-yuv,rate=1 ! videoscale ! video/x-raw-yuv,width=320,height=240 ! ffenc_mjpeg ! qtmux ! filesink location=#{out.file.path}
